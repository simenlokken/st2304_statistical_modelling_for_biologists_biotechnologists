---
title: "Week 8: Multiple Linear Regression"
author: "Simen LÃ¸kken"
format: html
editor: visual
---

## Set environment and load packages

```{r setup}

knitr::opts_chunk$set(
  warning = F,
  message = F
)
```

```{r}

library(dplyr)
library(ggplot2)
library(readr)
library(GGally)
```

## Module

```{r}

schey_data <- read_csv("https://www.math.ntnu.no/emner/ST2304/2021v/Week07/ScheyData.csv")

schey_data <- schey_data |> 
  janitor::clean_names()
```

```{r}

ggpairs(schey_data)
```

### Exercise

#### 1.

For those wondering, map is a just a for loop under the hood. See code chunk 2 for a way to do it with a "classic" for loop.

```{r}

mod_1 <- lm(dust ~ gape_size, data = schey_data)
mod_2 <- lm(dust ~ body_size, data = schey_data)

compute_r_squared <- function(model) {
  r_squared <- summary(model)$r.squared
  return(r_squared)
}

mod_list <- list("dust ~ gape_size" = mod_1, "dust ~ body_size" = mod_2)

map(mod_list, compute_r_squared)
```

```{r}

formulas <- list(gape_size = "dust ~ gape_size", body_size = "dust ~ body_size")

r_squared_values <- list()

for (var in names(formulas)) {
  model <- lm(formulas[[var]], data = schey_data)
  
  r_squared <- compute_r_squared(model) 
  
  r_squared_values[[var]] <- r_squared
}

r_squared_values
```

The equation for each of the models would like this:

1.  dust \~ gape_size = $$E(y) = 89.504 + 3.609x$$

2.  dust \~ body_size = $$E(y) = 104.5 + 0.3x$$

The $$\beta$$ indicates the effect magnitude of each variable (one unit increase), and the $$R^2$$ is very for body size, but much bigger for gape size.

#### 2.

```{r}

mod_3 <- lm(dust ~ gape_size + body_size, data = schey_data)

compute_r_squared(mod_3)
```
Regression equation:

$$E(y) = 9.376 + 10.618x_1 + 4.509x_2$$

### Regression more generally

```{r}

olympic_times <- read_csv("https://www.math.ntnu.no/emner/ST2304/2019v/Week5/Times.csv")

olympic_times <- olympic_times |> 
  janitor::clean_names()

mod_1_w <- lm(women_times ~ year, data = olympic_times)
```

```{r}

olympic_times |> 
  ggplot(aes(year, women_times)) +
  geom_point() +
  xlim(c(0, 2000)) +
  geom_abline(
    intercept = mod_1_w$coefficients[1],
    slope = mod_1_w$coefficients[2],
    color = "red"
  )
```

### Exercise

```{r}

schey_data <- schey_data |> 
  mutate(
    body_size_ctr = body_size - mean(body_size),
    gape_size_ctr = gape_size - mean(gape_size)
  )

# Base R solution, a for loop

model_formulas <- list(
  uncentered = "dust ~ body_size + gape_size",
  centered = "dust ~ body_size_ctr + gape_size_ctr"
)

coefficients <- list()

for (var in names(model_formulas)) {
  model <- lm(model_formulas[[var]], data = schey_data)
  coefficients[[var]] <- coef(model)
}

coefficients

# Functional programming solution, map functions from purrr

model_formulas <- list(
  uncentered = "dust ~ body_size + gape_size",
  centered = "dust ~ body_size_ctr + gape_size_ctr"
)

coefficients <- map(
  .x = model_formulas,
  .f = ~ {
    model <- lm(.x, data = schey_data)
    coefs <- coef(model)
    coefs
  }
)

coefficients
```

A standardized model:

```{r}

schey_data <- schey_data |> 
  mutate(
    body_size_scaled = scale(body_size),
    gape_size_scaled = scale(gape_size)
  )

model_formulas <- list(
  scaled = "dust ~ body_size_scaled + gape_size_scaled"
)

coefficients <- map(
  .x = model_formulas,
  .f = ~ {
    model <- lm(.x, data = schey_data)
    coefs <- coef(model)
    coefs
  }
)

coefficients
```
### Exercise polynomials

```{r}

data <- read_csv("https://www.math.ntnu.no/emner/ST2304/2019v/Week6/SimRegression.csv")

model_formulas <- list(
  linear = "y8 ~ x",
  quadratic = "y8 ~ poly(x, 2)"
)

coefficients <- map(
  .x = model_formulas,
  .f = ~ {
    model <- lm(.x, data = data)
    r_squared <- summary(model)$r.squared
    coefs <- coef(model)
  }
)

coefficients


```


















